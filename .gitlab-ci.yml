default:
  image: amazoncorretto:17.0.8@sha256:986a574adea0fb892e16dd5f3de99b8b15c1495770319153af051331bc6d49ab
  before_script:
    - ': before_script'
    - chmod +x gradlew
    - export GRADLE_USER_HOME=`pwd`/.gradle

# Static Application Security Testing (SAST) is a frequently used Application Security (AppSec) tool,
# which scans an applicationâ€™s source, binary, or byte code.
# https://www.microfocus.com/en-us/what-is/sast
include:
  - template: Security/SAST.gitlab-ci.yml

variables:
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  IMAGE_NAME: ktor-demo
  REGISTRY_PATH: $CI_REGISTRY_IMAGE/$IMAGE_NAME
  SAST_JAVA_VERSION: "17" # Required by SAST scanning

cache:
  paths:
    - .gradle/wrapper
    - .gradle/caches

stages:
  - test
  - build
  - deploy

test:
  stage: test
  script:
    - ./gradlew check -i
    - echo 'Printing code coverage for Gitlab statistics'
    - cat build/reports/jacoco/test/html/index.html | grep -o '<tfoot>.*</tfoot>'
  coverage: '/Total.*?([0-9]{1,3})%/'
  artifacts:
    paths:
      - build/reports/jacoco/test/*
      - build/reports/tests/test/*
    reports:
      junit:
        - "**/build/test-results/test/TEST-*.xml"
    expire_in: 1 hour

sonarcloud-check:
  needs:
    - job: test
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: ./gradlew sonarqube
  only:
    - main

build:
  stage: build
  script:
    - ./gradlew build -x test
  artifacts:
    paths:
      - build/libs/*.jar
    expire_in: 1 hour

docker:
  image: docker:19.03.15@sha256:ea1f0761c92b600417ad14bc9b2b3a30abf8e96e94895fee6cbb5353316f30b0
  stage: build
  needs:
    - job: build
  services:
    - docker:dind@sha256:020562d22f11c27997e00da910ed6b580d93094bc25841cb87aacab4ced4a882
  when: manual
  before_script:
    - ': before_script'
    - echo 'Printing all environment variable'
    - export
    - uname -a
    - cat /etc/os-release
    - docker images -a
    - docker -v
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $REGISTRY_PATH:$CI_COMMIT_SHORT_SHA -f Dockerfile .
    - echo "Pushing to '$REGISTRY_PATH'. Image tag - '$CI_COMMIT_SHORT_SHA'"
    - docker images -a
    - docker push $REGISTRY_PATH:$CI_COMMIT_SHORT_SHA
    - echo 'Done - check your Gitlab Container Registry.'

pages:
  stage: deploy
  script:
    - echo 'Cleaning old pages'
    - rm -rf public
    - ls -la
    - mkdir -p public/jacoco-report && mkdir -p public/gradle-report
    - cp -r build/reports/jacoco/test/html/* public/jacoco-report && cp -r build/reports/tests/test/* public/gradle-report
    - echo 'Public directory content after copying files'
    - ls -la ./public
  artifacts:
    paths:
      - public
    expire_in: 10 min
  only:
    - main
